@using Sales.Shared.Entities;

@inject SweetAlertService sweetAlertService


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>


<EditForm  EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>País:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Country.Name" />
            <ValidationMessage For="@(() => Country.Name)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>


@code {
    public EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public Country Country { get; set; } = null!;
    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }



    protected override void OnInitialized()
    {
        editContext= new(Country);
    }
    public bool FormPostedSuccesfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();

        if (!formWasModified || FormPostedSuccesfully)
        {
            return;

        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions {

                Title = "Confirmación",
                Text = "¿Desea abandonar la página?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText="No",
                ConfirmButtonText="Si",

        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm){
            return; //Deja salir al usuario sin guardar cambios
        }
        context.PreventNavigation(); //Impide que el usuario navegue


    }

}
